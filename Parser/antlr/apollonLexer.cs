//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//200320//Desktop//Apollon-main//Parser//antlr//apollon.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class apollonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NAF=7, NEGATION=8, EQUALS=9, 
		NOT_EQUALS=10, COMMENT=11, WS=12, CLASICAL_TERM=13, VARIABLE_TERM=14, 
		DOKU_SEPERATOR=15, NUMBER=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NAF", "NEGATION", "EQUALS", 
		"NOT_EQUALS", "COMMENT", "WS", "CLASICAL_TERM", "VARIABLE_TERM", "DOKU_SEPERATOR", 
		"NUMBER"
	};


	public apollonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public apollonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'.'", "':-'", "'@('", "')'", "'('", "'not'", "'-'", "'='", 
		"'!='", null, null, null, null, "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NAF", "NEGATION", "EQUALS", 
		"NOT_EQUALS", "COMMENT", "WS", "CLASICAL_TERM", "VARIABLE_TERM", "DOKU_SEPERATOR", 
		"NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "apollon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static apollonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,16,96,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,5,10,61,8,10,10,10,
		12,10,64,9,10,1,10,1,10,1,11,4,11,69,8,11,11,11,12,11,70,1,11,1,11,1,12,
		1,12,5,12,77,8,12,10,12,12,12,80,9,12,1,13,1,13,5,13,84,8,13,10,13,12,
		13,87,9,13,1,14,1,14,1,14,1,15,4,15,93,8,15,11,15,12,15,94,0,0,16,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,1,0,6,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,65,90,1,0,48,57,100,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,37,1,0,0,
		0,7,40,1,0,0,0,9,43,1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,51,1,0,0,0,
		17,53,1,0,0,0,19,55,1,0,0,0,21,58,1,0,0,0,23,68,1,0,0,0,25,74,1,0,0,0,
		27,81,1,0,0,0,29,88,1,0,0,0,31,92,1,0,0,0,33,34,5,44,0,0,34,2,1,0,0,0,
		35,36,5,46,0,0,36,4,1,0,0,0,37,38,5,58,0,0,38,39,5,45,0,0,39,6,1,0,0,0,
		40,41,5,64,0,0,41,42,5,40,0,0,42,8,1,0,0,0,43,44,5,41,0,0,44,10,1,0,0,
		0,45,46,5,40,0,0,46,12,1,0,0,0,47,48,5,110,0,0,48,49,5,111,0,0,49,50,5,
		116,0,0,50,14,1,0,0,0,51,52,5,45,0,0,52,16,1,0,0,0,53,54,5,61,0,0,54,18,
		1,0,0,0,55,56,5,33,0,0,56,57,5,61,0,0,57,20,1,0,0,0,58,62,5,37,0,0,59,
		61,8,0,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,
		65,1,0,0,0,64,62,1,0,0,0,65,66,6,10,0,0,66,22,1,0,0,0,67,69,7,1,0,0,68,
		67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,
		73,6,11,0,0,73,24,1,0,0,0,74,78,7,2,0,0,75,77,7,3,0,0,76,75,1,0,0,0,77,
		80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,26,1,0,0,0,80,78,1,0,0,0,81,
		85,7,4,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,
		86,1,0,0,0,86,28,1,0,0,0,87,85,1,0,0,0,88,89,5,58,0,0,89,90,5,58,0,0,90,
		30,1,0,0,0,91,93,7,5,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,
		95,1,0,0,0,95,32,1,0,0,0,6,0,62,70,78,85,94,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
