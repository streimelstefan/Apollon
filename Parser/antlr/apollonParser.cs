//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//strei//Documents//dev//Apollon//Parser//antlr//apollon.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class apollonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, NAF=6, NEGATION=7, EQUALS=8, NOT_EQUALS=9, 
		COMMENT=10, WS=11, CLASICAL_TERM=12, VARIABLE_TERM=13, NUMBER=14;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statement = 2, RULE_fact = 3, RULE_rule = 4, 
		RULE_constraint = 5, RULE_head = 6, RULE_body = 7, RULE_body_part = 8, 
		RULE_literal = 9, RULE_naf_literal = 10, RULE_atom = 11, RULE_atom_param_part = 12, 
		RULE_general_term = 13, RULE_operation = 14, RULE_operator = 15;
	public static readonly string[] ruleNames = {
		"program", "query", "statement", "fact", "rule", "constraint", "head", 
		"body", "body_part", "literal", "naf_literal", "atom", "atom_param_part", 
		"general_term", "operation", "operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'.'", "':-'", "'('", "')'", "'not'", "'-'", "'='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "NAF", "NEGATION", "EQUALS", "NOT_EQUALS", 
		"COMMENT", "WS", "CLASICAL_TERM", "VARIABLE_TERM", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "apollon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static apollonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public apollonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public apollonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(apollonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5256L) != 0)) {
				{
				{
				State = 32;
				statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext[] body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(apollonParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			body_part();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 41;
				Match(T__0);
				State = 42;
				body_part();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			Match(T__1);
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule() {
			return GetRuleContext<RuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(apollonParser.COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				fact();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				rule();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				constraint();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 6, RULE_fact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			literal();
			State = 58;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 8, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			head();
			State = 61;
			Match(T__2);
			State = 62;
			body();
			State = 63;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__2);
			State = 66;
			naf_literal();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 67;
				Match(T__0);
				State = 68;
				naf_literal();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 12, RULE_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext[] body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			body_part();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 79;
				Match(T__0);
				State = 80;
				body_part();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal() {
			return GetRuleContext<Naf_literalContext>(0);
		}
		public Body_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterBody_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitBody_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_partContext body_part() {
		Body_partContext _localctx = new Body_partContext(Context, State);
		EnterRule(_localctx, 16, RULE_body_part);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_TERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				operation();
				}
				break;
			case NAF:
			case NEGATION:
			case CLASICAL_TERM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				naf_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(apollonParser.NEGATION, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEGATION) {
				{
				State = 90;
				Match(NEGATION);
				}
			}

			State = 93;
			atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(apollonParser.NAF, 0); }
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 20, RULE_naf_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAF) {
				{
				State = 95;
				Match(NAF);
				}
			}

			State = 98;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASICAL_TERM() { return GetToken(apollonParser.CLASICAL_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atom_param_partContext[] atom_param_part() {
			return GetRuleContexts<Atom_param_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_param_partContext atom_param_part(int i) {
			return GetRuleContext<Atom_param_partContext>(i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 22, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(CLASICAL_TERM);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 101;
				Match(T__3);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28800L) != 0)) {
					{
					State = 102;
					atom_param_part();
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__0) {
						{
						{
						State = 103;
						Match(T__0);
						State = 104;
						atom_param_part();
						}
						}
						State = 109;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 112;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_param_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public General_termContext general_term() {
			return GetRuleContext<General_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(apollonParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Atom_param_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_param_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterAtom_param_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitAtom_param_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_param_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atom_param_partContext atom_param_part() {
		Atom_param_partContext _localctx = new Atom_param_partContext(Context, State);
		EnterRule(_localctx, 24, RULE_atom_param_part);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				general_term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASICAL_TERM() { return GetToken(apollonParser.CLASICAL_TERM, 0); }
		public General_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGeneral_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGeneral_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_termContext general_term() {
		General_termContext _localctx = new General_termContext(Context, State);
		EnterRule(_localctx, 26, RULE_general_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASICAL_TERM || _la==VARIABLE_TERM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal() {
			return GetRuleContext<Naf_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(apollonParser.NUMBER, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 28, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(VARIABLE_TERM);
			State = 123;
			@operator();
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAF:
			case NEGATION:
			case CLASICAL_TERM:
				{
				State = 124;
				naf_literal();
				}
				break;
			case NUMBER:
				{
				State = 125;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(apollonParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(apollonParser.NOT_EQUALS, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==NOT_EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,131,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,0,1,0,1,1,1,1,1,1,5,1,44,8,
		1,10,1,12,1,47,9,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,70,8,5,10,5,12,5,73,9,5,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,5,7,82,8,7,10,7,12,7,85,9,7,1,8,1,8,3,8,89,8,8,1,
		9,3,9,92,8,9,1,9,1,9,1,10,3,10,97,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,5,11,106,8,11,10,11,12,11,109,9,11,3,11,111,8,11,1,11,3,11,114,8,11,
		1,12,1,12,1,12,3,12,119,8,12,1,13,1,13,1,14,1,14,1,14,1,14,3,14,127,8,
		14,1,15,1,15,1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,
		2,1,0,12,13,1,0,8,9,130,0,35,1,0,0,0,2,40,1,0,0,0,4,55,1,0,0,0,6,57,1,
		0,0,0,8,60,1,0,0,0,10,65,1,0,0,0,12,76,1,0,0,0,14,78,1,0,0,0,16,88,1,0,
		0,0,18,91,1,0,0,0,20,96,1,0,0,0,22,100,1,0,0,0,24,118,1,0,0,0,26,120,1,
		0,0,0,28,122,1,0,0,0,30,128,1,0,0,0,32,34,3,4,2,0,33,32,1,0,0,0,34,37,
		1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,
		5,0,0,1,39,1,1,0,0,0,40,45,3,16,8,0,41,42,5,1,0,0,42,44,3,16,8,0,43,41,
		1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,45,
		1,0,0,0,48,49,5,2,0,0,49,50,5,0,0,1,50,3,1,0,0,0,51,56,3,6,3,0,52,56,3,
		8,4,0,53,56,3,10,5,0,54,56,5,10,0,0,55,51,1,0,0,0,55,52,1,0,0,0,55,53,
		1,0,0,0,55,54,1,0,0,0,56,5,1,0,0,0,57,58,3,18,9,0,58,59,5,2,0,0,59,7,1,
		0,0,0,60,61,3,12,6,0,61,62,5,3,0,0,62,63,3,14,7,0,63,64,5,2,0,0,64,9,1,
		0,0,0,65,66,5,3,0,0,66,71,3,20,10,0,67,68,5,1,0,0,68,70,3,20,10,0,69,67,
		1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,71,
		1,0,0,0,74,75,5,2,0,0,75,11,1,0,0,0,76,77,3,18,9,0,77,13,1,0,0,0,78,83,
		3,16,8,0,79,80,5,1,0,0,80,82,3,16,8,0,81,79,1,0,0,0,82,85,1,0,0,0,83,81,
		1,0,0,0,83,84,1,0,0,0,84,15,1,0,0,0,85,83,1,0,0,0,86,89,3,28,14,0,87,89,
		3,20,10,0,88,86,1,0,0,0,88,87,1,0,0,0,89,17,1,0,0,0,90,92,5,7,0,0,91,90,
		1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,3,22,11,0,94,19,1,0,0,0,95,97,
		5,6,0,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,99,3,18,9,0,99,21,
		1,0,0,0,100,113,5,12,0,0,101,110,5,4,0,0,102,107,3,24,12,0,103,104,5,1,
		0,0,104,106,3,24,12,0,105,103,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,
		107,108,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,110,102,1,0,0,0,110,111,
		1,0,0,0,111,112,1,0,0,0,112,114,5,5,0,0,113,101,1,0,0,0,113,114,1,0,0,
		0,114,23,1,0,0,0,115,119,3,26,13,0,116,119,5,14,0,0,117,119,3,18,9,0,118,
		115,1,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,25,1,0,0,0,120,121,7,0,
		0,0,121,27,1,0,0,0,122,123,5,13,0,0,123,126,3,30,15,0,124,127,3,20,10,
		0,125,127,5,14,0,0,126,124,1,0,0,0,126,125,1,0,0,0,127,29,1,0,0,0,128,
		129,7,1,0,0,129,31,1,0,0,0,13,35,45,55,71,83,88,91,96,107,110,113,118,
		126
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
