//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//strei//Documents//dev//Apollon//Parser//antlr//apollon.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class apollonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NAF=8, NEGATION=9, 
		EQUALS=10, LARGER=11, SMALLER=12, LARGER_EQUALS=13, SMALLER_EQUALS=14, 
		PLUS=15, TIMES=16, DIVIDE=17, NOT_EQUALS=18, COMMENT=19, WS=20, CLASICAL_TERM=21, 
		VARIABLE_TERM=22, DOKU_SEPERATOR=23, NUMBER=24;
	public const int
		RULE_program = 0, RULE_query = 1, RULE_statement = 2, RULE_fact = 3, RULE_rule = 4, 
		RULE_constraint = 5, RULE_head = 6, RULE_body = 7, RULE_body_part = 8, 
		RULE_literal = 9, RULE_variable_placeholder = 10, RULE_docu_string = 11, 
		RULE_docu_string_part = 12, RULE_docu_string_string_part = 13, RULE_docu = 14, 
		RULE_docu_head = 15, RULE_naf_literal = 16, RULE_atom = 17, RULE_atom_param_part = 18, 
		RULE_general_term = 19, RULE_inline_operation = 20, RULE_generating_operation = 21, 
		RULE_generating_operation_variable = 22, RULE_generating_operation_operant = 23, 
		RULE_inline_operators = 24, RULE_generating_operators = 25;
	public static readonly string[] ruleNames = {
		"program", "query", "statement", "fact", "rule", "constraint", "head", 
		"body", "body_part", "literal", "variable_placeholder", "docu_string", 
		"docu_string_part", "docu_string_string_part", "docu", "docu_head", "naf_literal", 
		"atom", "atom_param_part", "general_term", "inline_operation", "generating_operation", 
		"generating_operation_variable", "generating_operation_operant", "inline_operators", 
		"generating_operators"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'.'", "':-'", "'@('", "')'", "'is'", "'('", "'not'", "'-'", 
		"'='", "'>'", "'<'", "'>='", "'<='", "'+'", "'*'", "'/'", "'!='", null, 
		null, null, null, "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NAF", "NEGATION", "EQUALS", 
		"LARGER", "SMALLER", "LARGER_EQUALS", "SMALLER_EQUALS", "PLUS", "TIMES", 
		"DIVIDE", "NOT_EQUALS", "COMMENT", "WS", "CLASICAL_TERM", "VARIABLE_TERM", 
		"DOKU_SEPERATOR", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "apollon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static apollonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public apollonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public apollonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(apollonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2621960L) != 0)) {
				{
				{
				State = 52;
				statement();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext[] body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(apollonParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			body_part();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 61;
				Match(T__0);
				State = 62;
				body_part();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68;
			Match(T__1);
			State = 69;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule() {
			return GetRuleContext<RuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocuContext docu() {
			return GetRuleContext<DocuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(apollonParser.COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				fact();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				rule();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				constraint();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74;
				docu();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 6, RULE_fact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			literal();
			State = 79;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 8, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			head();
			State = 82;
			Match(T__2);
			State = 83;
			body();
			State = 84;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext[] body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__2);
			State = 87;
			body_part();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 88;
				Match(T__0);
				State = 89;
				body_part();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 12, RULE_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext[] body_part() {
			return GetRuleContexts<Body_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_partContext body_part(int i) {
			return GetRuleContext<Body_partContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			body_part();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 100;
				Match(T__0);
				State = 101;
				body_part();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inline_operationContext inline_operation() {
			return GetRuleContext<Inline_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal() {
			return GetRuleContext<Naf_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generating_operationContext generating_operation() {
			return GetRuleContext<Generating_operationContext>(0);
		}
		public Body_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterBody_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitBody_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_partContext body_part() {
		Body_partContext _localctx = new Body_partContext(Context, State);
		EnterRule(_localctx, 16, RULE_body_part);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				inline_operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				naf_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				generating_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(apollonParser.NEGATION, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEGATION) {
				{
				State = 112;
				Match(NEGATION);
				}
			}

			State = 115;
			atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_placeholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		public Variable_placeholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterVariable_placeholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitVariable_placeholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_placeholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_placeholderContext variable_placeholder() {
		Variable_placeholderContext _localctx = new Variable_placeholderContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__3);
			State = 118;
			Match(VARIABLE_TERM);
			State = 119;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Docu_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Docu_string_partContext[] docu_string_part() {
			return GetRuleContexts<Docu_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Docu_string_partContext docu_string_part(int i) {
			return GetRuleContext<Docu_string_partContext>(i);
		}
		public Docu_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docu_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterDocu_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitDocu_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocu_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Docu_stringContext docu_string() {
		Docu_stringContext _localctx = new Docu_stringContext(Context, State);
		EnterRule(_localctx, 22, RULE_docu_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 121;
				docu_string_part();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 6291792L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Docu_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Docu_string_string_partContext docu_string_string_part() {
			return GetRuleContext<Docu_string_string_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_placeholderContext variable_placeholder() {
			return GetRuleContext<Variable_placeholderContext>(0);
		}
		public Docu_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docu_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterDocu_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitDocu_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocu_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Docu_string_partContext docu_string_part() {
		Docu_string_partContext _localctx = new Docu_string_partContext(Context, State);
		EnterRule(_localctx, 24, RULE_docu_string_part);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case NAF:
			case CLASICAL_TERM:
			case VARIABLE_TERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				docu_string_string_part();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				variable_placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Docu_string_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public General_termContext general_term() {
			return GetRuleContext<General_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(apollonParser.NAF, 0); }
		public Docu_string_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docu_string_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterDocu_string_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitDocu_string_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocu_string_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Docu_string_string_partContext docu_string_string_part() {
		Docu_string_string_partContext _localctx = new Docu_string_string_partContext(Context, State);
		EnterRule(_localctx, 26, RULE_docu_string_string_part);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASICAL_TERM:
			case VARIABLE_TERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				general_term();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(T__5);
				}
				break;
			case NAF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				Match(NAF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Docu_headContext docu_head() {
			return GetRuleContext<Docu_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOKU_SEPERATOR() { return GetToken(apollonParser.DOKU_SEPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Docu_stringContext docu_string() {
			return GetRuleContext<Docu_stringContext>(0);
		}
		public DocuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterDocu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitDocu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocuContext docu() {
		DocuContext _localctx = new DocuContext(Context, State);
		EnterRule(_localctx, 28, RULE_docu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			docu_head();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOKU_SEPERATOR) {
				{
				State = 136;
				Match(DOKU_SEPERATOR);
				State = 137;
				docu_string();
				}
			}

			State = 140;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Docu_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASICAL_TERM() { return GetToken(apollonParser.CLASICAL_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(apollonParser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_TERM() { return GetTokens(apollonParser.VARIABLE_TERM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM(int i) {
			return GetToken(apollonParser.VARIABLE_TERM, i);
		}
		public Docu_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docu_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterDocu_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitDocu_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocu_head(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Docu_headContext docu_head() {
		Docu_headContext _localctx = new Docu_headContext(Context, State);
		EnterRule(_localctx, 30, RULE_docu_head);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEGATION) {
				{
				State = 142;
				Match(NEGATION);
				}
			}

			State = 145;
			Match(CLASICAL_TERM);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 146;
				Match(T__6);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE_TERM) {
					{
					State = 147;
					Match(VARIABLE_TERM);
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__0) {
						{
						{
						State = 148;
						Match(T__0);
						State = 149;
						Match(VARIABLE_TERM);
						}
						}
						State = 154;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 157;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(apollonParser.NAF, 0); }
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 32, RULE_naf_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAF) {
				{
				State = 160;
				Match(NAF);
				}
			}

			State = 163;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASICAL_TERM() { return GetToken(apollonParser.CLASICAL_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atom_param_partContext[] atom_param_part() {
			return GetRuleContexts<Atom_param_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_param_partContext atom_param_part(int i) {
			return GetRuleContext<Atom_param_partContext>(i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 34, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(CLASICAL_TERM);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 166;
				Match(T__6);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 23069184L) != 0)) {
					{
					State = 167;
					atom_param_part();
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__0) {
						{
						{
						State = 168;
						Match(T__0);
						State = 169;
						atom_param_part();
						}
						}
						State = 174;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 177;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_param_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public General_termContext general_term() {
			return GetRuleContext<General_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(apollonParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Atom_param_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_param_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterAtom_param_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitAtom_param_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_param_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atom_param_partContext atom_param_part() {
		Atom_param_partContext _localctx = new Atom_param_partContext(Context, State);
		EnterRule(_localctx, 36, RULE_atom_param_part);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				general_term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASICAL_TERM() { return GetToken(apollonParser.CLASICAL_TERM, 0); }
		public General_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGeneral_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGeneral_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_termContext general_term() {
		General_termContext _localctx = new General_termContext(Context, State);
		EnterRule(_localctx, 38, RULE_general_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASICAL_TERM || _la==VARIABLE_TERM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Inline_operatorsContext inline_operators() {
			return GetRuleContext<Inline_operatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_param_partContext atom_param_part() {
			return GetRuleContext<Atom_param_partContext>(0);
		}
		public Inline_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterInline_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitInline_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_operationContext inline_operation() {
		Inline_operationContext _localctx = new Inline_operationContext(Context, State);
		EnterRule(_localctx, 40, RULE_inline_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(VARIABLE_TERM);
			State = 188;
			inline_operators();
			State = 189;
			atom_param_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generating_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generating_operation_variableContext generating_operation_variable() {
			return GetRuleContext<Generating_operation_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generating_operatorsContext generating_operators() {
			return GetRuleContext<Generating_operatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generating_operation_operantContext generating_operation_operant() {
			return GetRuleContext<Generating_operation_operantContext>(0);
		}
		public Generating_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generating_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGenerating_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGenerating_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerating_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generating_operationContext generating_operation() {
		Generating_operationContext _localctx = new Generating_operationContext(Context, State);
		EnterRule(_localctx, 42, RULE_generating_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(VARIABLE_TERM);
			State = 192;
			Match(T__5);
			State = 193;
			generating_operation_variable();
			State = 194;
			generating_operators();
			State = 195;
			generating_operation_operant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generating_operation_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		public Generating_operation_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generating_operation_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGenerating_operation_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGenerating_operation_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerating_operation_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generating_operation_variableContext generating_operation_variable() {
		Generating_operation_variableContext _localctx = new Generating_operation_variableContext(Context, State);
		EnterRule(_localctx, 44, RULE_generating_operation_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(VARIABLE_TERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generating_operation_operantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_TERM() { return GetToken(apollonParser.VARIABLE_TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(apollonParser.NUMBER, 0); }
		public Generating_operation_operantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generating_operation_operant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGenerating_operation_operant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGenerating_operation_operant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerating_operation_operant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generating_operation_operantContext generating_operation_operant() {
		Generating_operation_operantContext _localctx = new Generating_operation_operantContext(Context, State);
		EnterRule(_localctx, 46, RULE_generating_operation_operant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==VARIABLE_TERM || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_operatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(apollonParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(apollonParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGER() { return GetToken(apollonParser.LARGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER() { return GetToken(apollonParser.SMALLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGER_EQUALS() { return GetToken(apollonParser.LARGER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLER_EQUALS() { return GetToken(apollonParser.SMALLER_EQUALS, 0); }
		public Inline_operatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_operators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterInline_operators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitInline_operators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_operators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_operatorsContext inline_operators() {
		Inline_operatorsContext _localctx = new Inline_operatorsContext(Context, State);
		EnterRule(_localctx, 48, RULE_inline_operators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 293888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generating_operatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(apollonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(apollonParser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(apollonParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(apollonParser.DIVIDE, 0); }
		public Generating_operatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generating_operators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.EnterGenerating_operators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IapollonListener typedListener = listener as IapollonListener;
			if (typedListener != null) typedListener.ExitGenerating_operators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IapollonVisitor<TResult> typedVisitor = visitor as IapollonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerating_operators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generating_operatorsContext generating_operators() {
		Generating_operatorsContext _localctx = new Generating_operatorsContext(Context, State);
		EnterRule(_localctx, 50, RULE_generating_operators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,206,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,5,0,54,8,0,10,0,12,0,57,9,
		0,1,0,1,0,1,1,1,1,1,1,5,1,64,8,1,10,1,12,1,67,9,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,3,2,77,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		5,5,91,8,5,10,5,12,5,94,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,5,7,103,8,7,10,
		7,12,7,106,9,7,1,8,1,8,1,8,3,8,111,8,8,1,9,3,9,114,8,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,11,4,11,123,8,11,11,11,12,11,124,1,12,1,12,3,12,129,8,12,
		1,13,1,13,1,13,3,13,134,8,13,1,14,1,14,1,14,3,14,139,8,14,1,14,1,14,1,
		15,3,15,144,8,15,1,15,1,15,1,15,1,15,1,15,5,15,151,8,15,10,15,12,15,154,
		9,15,3,15,156,8,15,1,15,3,15,159,8,15,1,16,3,16,162,8,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,5,17,171,8,17,10,17,12,17,174,9,17,3,17,176,8,17,1,
		17,3,17,179,8,17,1,18,1,18,1,18,3,18,184,8,18,1,19,1,19,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,0,4,1,0,21,22,2,0,22,22,24,24,2,0,10,14,18,18,2,0,9,
		9,15,17,205,0,55,1,0,0,0,2,60,1,0,0,0,4,76,1,0,0,0,6,78,1,0,0,0,8,81,1,
		0,0,0,10,86,1,0,0,0,12,97,1,0,0,0,14,99,1,0,0,0,16,110,1,0,0,0,18,113,
		1,0,0,0,20,117,1,0,0,0,22,122,1,0,0,0,24,128,1,0,0,0,26,133,1,0,0,0,28,
		135,1,0,0,0,30,143,1,0,0,0,32,161,1,0,0,0,34,165,1,0,0,0,36,183,1,0,0,
		0,38,185,1,0,0,0,40,187,1,0,0,0,42,191,1,0,0,0,44,197,1,0,0,0,46,199,1,
		0,0,0,48,201,1,0,0,0,50,203,1,0,0,0,52,54,3,4,2,0,53,52,1,0,0,0,54,57,
		1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,
		5,0,0,1,59,1,1,0,0,0,60,65,3,16,8,0,61,62,5,1,0,0,62,64,3,16,8,0,63,61,
		1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,65,
		1,0,0,0,68,69,5,2,0,0,69,70,5,0,0,1,70,3,1,0,0,0,71,77,3,6,3,0,72,77,3,
		8,4,0,73,77,3,10,5,0,74,77,3,28,14,0,75,77,5,19,0,0,76,71,1,0,0,0,76,72,
		1,0,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,5,1,0,0,0,78,79,3,
		18,9,0,79,80,5,2,0,0,80,7,1,0,0,0,81,82,3,12,6,0,82,83,5,3,0,0,83,84,3,
		14,7,0,84,85,5,2,0,0,85,9,1,0,0,0,86,87,5,3,0,0,87,92,3,16,8,0,88,89,5,
		1,0,0,89,91,3,16,8,0,90,88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,
		0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,5,2,0,0,96,11,1,0,0,0,97,98,3,
		18,9,0,98,13,1,0,0,0,99,104,3,16,8,0,100,101,5,1,0,0,101,103,3,16,8,0,
		102,100,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,15,
		1,0,0,0,106,104,1,0,0,0,107,111,3,40,20,0,108,111,3,32,16,0,109,111,3,
		42,21,0,110,107,1,0,0,0,110,108,1,0,0,0,110,109,1,0,0,0,111,17,1,0,0,0,
		112,114,5,9,0,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,1,0,0,0,115,116,
		3,34,17,0,116,19,1,0,0,0,117,118,5,4,0,0,118,119,5,22,0,0,119,120,5,5,
		0,0,120,21,1,0,0,0,121,123,3,24,12,0,122,121,1,0,0,0,123,124,1,0,0,0,124,
		122,1,0,0,0,124,125,1,0,0,0,125,23,1,0,0,0,126,129,3,26,13,0,127,129,3,
		20,10,0,128,126,1,0,0,0,128,127,1,0,0,0,129,25,1,0,0,0,130,134,3,38,19,
		0,131,134,5,6,0,0,132,134,5,8,0,0,133,130,1,0,0,0,133,131,1,0,0,0,133,
		132,1,0,0,0,134,27,1,0,0,0,135,138,3,30,15,0,136,137,5,23,0,0,137,139,
		3,22,11,0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,2,
		0,0,141,29,1,0,0,0,142,144,5,9,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,
		145,1,0,0,0,145,158,5,21,0,0,146,155,5,7,0,0,147,152,5,22,0,0,148,149,
		5,1,0,0,149,151,5,22,0,0,150,148,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,
		0,152,153,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,155,147,1,0,0,0,155,
		156,1,0,0,0,156,157,1,0,0,0,157,159,5,5,0,0,158,146,1,0,0,0,158,159,1,
		0,0,0,159,31,1,0,0,0,160,162,5,8,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,
		163,1,0,0,0,163,164,3,18,9,0,164,33,1,0,0,0,165,178,5,21,0,0,166,175,5,
		7,0,0,167,172,3,36,18,0,168,169,5,1,0,0,169,171,3,36,18,0,170,168,1,0,
		0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,176,1,0,0,0,174,
		172,1,0,0,0,175,167,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,179,5,
		5,0,0,178,166,1,0,0,0,178,179,1,0,0,0,179,35,1,0,0,0,180,184,3,38,19,0,
		181,184,5,24,0,0,182,184,3,18,9,0,183,180,1,0,0,0,183,181,1,0,0,0,183,
		182,1,0,0,0,184,37,1,0,0,0,185,186,7,0,0,0,186,39,1,0,0,0,187,188,5,22,
		0,0,188,189,3,48,24,0,189,190,3,36,18,0,190,41,1,0,0,0,191,192,5,22,0,
		0,192,193,5,6,0,0,193,194,3,44,22,0,194,195,3,50,25,0,195,196,3,46,23,
		0,196,43,1,0,0,0,197,198,5,22,0,0,198,45,1,0,0,0,199,200,7,1,0,0,200,47,
		1,0,0,0,201,202,7,2,0,0,202,49,1,0,0,0,203,204,7,3,0,0,204,51,1,0,0,0,
		20,55,65,76,92,104,110,113,124,128,133,138,143,152,155,158,161,172,175,
		178,183
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
